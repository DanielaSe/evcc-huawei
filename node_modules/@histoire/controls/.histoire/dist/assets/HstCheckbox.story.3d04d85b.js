var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
import { ax as _export_sfc, d as defineComponent, r as ref, c as computed, w as watch, a as openBlock, j as createBlock, k as withCtx, f as renderSlot, e as createBaseVNode, n as normalizeClass, b as createElementBlock, i as unref, v as withKeys, g as withModifiers, q as resolveComponent, l as createVNode } from "./vendor.2833ae3d.js";
import { H as HstWrapper } from "./HstWrapper.246b6982.js";
const _hoisted_1 = { class: "htw-text-white htw-w-[16px] htw-h-[16px] htw-relative" };
const _hoisted_2 = {
  width: "16",
  height: "16",
  viewBox: "0 0 24 24",
  class: "htw-relative htw-z-10"
};
const _hoisted_3 = ["stroke-dasharray", "stroke-dashoffset"];
const __default__ = {
  name: "HstCheckbox"
};
const _sfc_main$1 = /* @__PURE__ */ defineComponent(__spreadProps(__spreadValues({}, __default__), {
  props: {
    modelValue: { type: Boolean, required: true },
    title: { type: String, required: false }
  },
  emits: {
    "update:modelValue": (newValue) => true
  },
  setup(__props, { emit }) {
    const props = __props;
    function toggle() {
      emit("update:modelValue", !props.modelValue);
      animationEnabled.value = true;
    }
    const path = ref();
    const dasharray = ref(0);
    const progress = computed(() => props.modelValue ? 1 : 0);
    const dashoffset = computed(() => (1 - progress.value) * dasharray.value);
    const animationEnabled = ref(false);
    watch(path, (value) => {
      var _a, _b, _c;
      dasharray.value = (_c = (_b = (_a = path.value).getTotalLength) == null ? void 0 : _b.call(_a)) != null ? _c : 21.21;
    });
    return (_ctx, _cache) => {
      return openBlock(), createBlock(HstWrapper, {
        role: "checkbox",
        tabindex: "0",
        class: "htw-cursor-pointer htw-items-center",
        title: __props.title,
        onClick: _cache[0] || (_cache[0] = ($event) => toggle()),
        onKeydown: [
          _cache[1] || (_cache[1] = withKeys(withModifiers(($event) => toggle(), ["prevent"]), ["enter"])),
          _cache[2] || (_cache[2] = withKeys(withModifiers(($event) => toggle(), ["prevent"]), ["space"]))
        ]
      }, {
        actions: withCtx(() => [
          renderSlot(_ctx.$slots, "actions")
        ]),
        default: withCtx(() => [
          createBaseVNode("div", _hoisted_1, [
            createBaseVNode("div", {
              class: normalizeClass(["htw-border htw-border-solid group-active:htw-bg-gray-500/20 htw-rounded-sm htw-box-border htw-absolute htw-inset-0 htw-transition-border htw-duration-150 htw-ease-out", [
                __props.modelValue ? "htw-border-primary-500 htw-border-8" : "htw-border-black/25 dark:htw-border-white/25 htw-delay-150"
              ]])
            }, null, 2),
            (openBlock(), createElementBlock("svg", _hoisted_2, [
              createBaseVNode("path", {
                ref_key: "path",
                ref: path,
                d: "m 4 12 l 5 5 l 10 -10",
                fill: "none",
                class: normalizeClass(["htw-stroke-white htw-stroke-2 htw-duration-200 htw-ease-in-out", [
                  animationEnabled.value ? "htw-transition-all" : "htw-transition-none",
                  {
                    "htw-delay-150": __props.modelValue
                  }
                ]]),
                "stroke-dasharray": dasharray.value,
                "stroke-dashoffset": unref(dashoffset)
              }, null, 10, _hoisted_3)
            ]))
          ])
        ]),
        _: 3
      }, 8, ["title"]);
    };
  }
}));
_sfc_main$1.__file = "src/components/checkbox/HstCheckbox.vue";
var HstCheckbox = /* @__PURE__ */ _export_sfc(_sfc_main$1, [["__file", "/Users/akryum/Projects/histoire/packages/histoire-controls/src/components/checkbox/HstCheckbox.vue"]]);
const _sfc_main = /* @__PURE__ */ defineComponent({
  name: "HstCheckbox.story",
  setup(__props) {
    function initState() {
      return {
        checked: false
      };
    }
    return (_ctx, _cache) => {
      const _component_Variant = resolveComponent("Variant");
      const _component_Story = resolveComponent("Story");
      return openBlock(), createBlock(_component_Story, { title: "HstCheckbox" }, {
        default: withCtx(() => [
          createVNode(_component_Variant, {
            title: "playground",
            "init-state": initState
          }, {
            default: withCtx(({ state }) => [
              createVNode(HstCheckbox, {
                modelValue: state.checked,
                "onUpdate:modelValue": ($event) => state.checked = $event,
                title: "Label"
              }, null, 8, ["modelValue", "onUpdate:modelValue"])
            ]),
            controls: withCtx(({ state }) => [
              createVNode(HstCheckbox, {
                modelValue: state.checked,
                "onUpdate:modelValue": ($event) => state.checked = $event,
                title: "Label"
              }, null, 8, ["modelValue", "onUpdate:modelValue"])
            ]),
            _: 1
          })
        ]),
        _: 1
      });
    };
  }
});
_sfc_main.__file = "src/components/checkbox/HstCheckbox.story.vue";
var HstCheckbox_story = /* @__PURE__ */ _export_sfc(_sfc_main, [["__file", "/Users/akryum/Projects/histoire/packages/histoire-controls/src/components/checkbox/HstCheckbox.story.vue"]]);
export { HstCheckbox_story as default };
