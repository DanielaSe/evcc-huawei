var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
import { d as defineComponent, c as computed, a as openBlock, j as createBlock, k as withCtx, e as createBaseVNode, b as createElementBlock, J as renderList, i as unref, F as Fragment, f as renderSlot, l as createVNode, I as Icon, as as Dropdown, ax as _export_sfc, x as mergeProps, t as toDisplayString, R as createTextVNode, r as ref, n as normalizeClass, h as normalizeStyle, q as resolveComponent } from "./vendor.2833ae3d.js";
import { H as HstWrapper } from "./HstWrapper.246b6982.js";
var CustomSelect_vue_vue_type_style_index_0_lang = "";
const _hoisted_1$1 = { class: "htw-cursor-pointer htw-w-full htw-outline-none htw-px-2 htw-h-[27px] -htw-my-1 htw-border htw-border-solid htw-border-black/25 dark:htw-border-white/25 hover:htw-border-primary-500 dark:hover:htw-border-primary-500 htw-rounded-sm htw-flex htw-gap-2 htw-items-center htw-leading-normal" };
const _hoisted_2$1 = { class: "htw-flex-1 htw-truncate" };
const _hoisted_3 = { class: "htw-flex htw-flex-col htw-bg-gray-50 dark:htw-bg-gray-700" };
const _hoisted_4 = ["onClick"];
const __default__$1 = {
  name: "CustomSelect"
};
const _sfc_main$2 = defineComponent(__spreadProps(__spreadValues({}, __default__$1), {
  props: {
    modelValue: { type: String, required: true },
    options: { type: [Object, Array], required: true }
  },
  emits: ["update:modelValue"],
  setup(__props, { emit: emits }) {
    const props = __props;
    const formattedOptions = computed(() => {
      if (Array.isArray(props.options)) {
        return Object.fromEntries(props.options.map((value) => {
          if (typeof value === "string") {
            return [value, value];
          } else {
            return [value.value, value.label];
          }
        }));
      }
      return props.options;
    });
    const selectedLabel = computed(() => formattedOptions.value[props.modelValue]);
    function selectValue(value, hide) {
      emits("update:modelValue", value);
      hide();
    }
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(Dropdown), { "auto-size": "" }, {
        popper: withCtx(({ hide }) => [
          createBaseVNode("div", _hoisted_3, [
            (openBlock(true), createElementBlock(Fragment, null, renderList(unref(formattedOptions), (label, value) => {
              return openBlock(), createElementBlock("div", mergeProps(__spreadProps(__spreadValues({}, _ctx.$attrs), { class: null, style: null }), {
                key: label,
                class: ["htw-px-2 htw-py-1 htw-cursor-pointer hover:htw-bg-primary-100 dark:hover:htw-bg-primary-700", {
                  "htw-bg-primary-200 dark:htw-bg-primary-800": props.modelValue === value
                }],
                onClick: ($event) => selectValue(value, hide)
              }), toDisplayString(label), 17, _hoisted_4);
            }), 128))
          ])
        ]),
        default: withCtx(() => [
          createBaseVNode("div", _hoisted_1$1, [
            createBaseVNode("div", _hoisted_2$1, [
              renderSlot(_ctx.$slots, "default", { label: unref(selectedLabel) }, () => [
                createTextVNode(toDisplayString(unref(selectedLabel)), 1)
              ])
            ]),
            createVNode(unref(Icon), {
              icon: "carbon:chevron-sort",
              class: "htw-w-4 htw-h-4 htw-flex-none htw-ml-auto"
            })
          ])
        ]),
        _: 3
      });
    };
  }
}));
_sfc_main$2.__file = "src/components/select/CustomSelect.vue";
var CustomSelect = /* @__PURE__ */ _export_sfc(_sfc_main$2, [["__file", "/Users/akryum/Projects/histoire/packages/histoire-controls/src/components/select/CustomSelect.vue"]]);
const __default__ = {
  name: "HstSelect"
};
const _sfc_main$1 = defineComponent(__spreadProps(__spreadValues({}, __default__), {
  props: {
    title: { type: String, required: false },
    modelValue: { type: String, required: true },
    options: { type: [Object, Array], required: true }
  },
  emits: ["update:modelValue"],
  setup(__props, { emit: emits }) {
    ref();
    return (_ctx, _cache) => {
      return openBlock(), createBlock(HstWrapper, {
        title: __props.title,
        class: normalizeClass(["htw-cursor-text htw-items-center", _ctx.$attrs.class]),
        style: normalizeStyle(_ctx.$attrs.style)
      }, {
        actions: withCtx(() => [
          renderSlot(_ctx.$slots, "actions")
        ]),
        default: withCtx(() => [
          createVNode(CustomSelect, {
            options: __props.options,
            "model-value": __props.modelValue,
            "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => emits("update:modelValue", $event))
          }, null, 8, ["options", "model-value"])
        ]),
        _: 3
      }, 8, ["title", "class", "style"]);
    };
  }
}));
_sfc_main$1.__file = "src/components/select/HstSelect.vue";
var HstSelect = /* @__PURE__ */ _export_sfc(_sfc_main$1, [["__file", "/Users/akryum/Projects/histoire/packages/histoire-controls/src/components/select/HstSelect.vue"]]);
const _hoisted_1 = { class: "htw-text-xs htw-bg-gray-50 dark:htw-bg-gray-600 htw-rounded htw-p-4" };
const _hoisted_2 = { class: "htw-text-xs htw-bg-gray-50 dark:htw-bg-gray-600 htw-rounded htw-p-4" };
const _sfc_main = /* @__PURE__ */ defineComponent({
  name: "HstSelect.story",
  setup(__props) {
    const options = {
      "crash-bandicoot": "Crash Bandicoot",
      "the-last-of-us": "The Last of Us",
      "ghost-of-tsushima": "Ghost of Tsushima"
    };
    const flatOptions = Object.keys(options);
    const objectOptions = Object.keys(options).map((key) => ({
      label: options[key],
      value: key
    }));
    function initState() {
      return {
        label: "My really long label",
        select: "crash-bandicoot"
      };
    }
    return (_ctx, _cache) => {
      const _component_Variant = resolveComponent("Variant");
      const _component_Story = resolveComponent("Story");
      return openBlock(), createBlock(_component_Story, {
        title: "HstSelect",
        layout: {
          type: "grid",
          width: "100%"
        }
      }, {
        default: withCtx(() => [
          createVNode(_component_Variant, {
            title: "default",
            "init-state": initState
          }, {
            default: withCtx(({ state }) => [
              createVNode(HstSelect, {
                modelValue: state.select,
                "onUpdate:modelValue": ($event) => state.select = $event,
                title: state.label,
                options
              }, null, 8, ["modelValue", "onUpdate:modelValue", "title"])
            ]),
            controls: withCtx(({ state }) => [
              createVNode(HstSelect, {
                modelValue: state.select,
                "onUpdate:modelValue": ($event) => state.select = $event,
                title: "Select",
                options
              }, null, 8, ["modelValue", "onUpdate:modelValue"])
            ]),
            _: 1
          }),
          createVNode(_component_Variant, {
            title: "no-label",
            "init-state": initState
          }, {
            default: withCtx(({ state }) => [
              createVNode(HstSelect, {
                modelValue: state.select,
                "onUpdate:modelValue": ($event) => state.select = $event,
                options
              }, null, 8, ["modelValue", "onUpdate:modelValue"])
            ]),
            controls: withCtx(({ state }) => [
              createVNode(HstSelect, {
                modelValue: state.select,
                "onUpdate:modelValue": ($event) => state.select = $event,
                title: "Select",
                options
              }, null, 8, ["modelValue", "onUpdate:modelValue"])
            ]),
            _: 1
          }),
          createVNode(_component_Variant, {
            title: "options-as-object",
            "init-state": initState
          }, {
            default: withCtx(({ state }) => [
              createBaseVNode("pre", { class: "htw-text-xs htw-bg-gray-50 dark:htw-bg-gray-600 htw-rounded htw-p-4" }, toDisplayString(options)),
              createVNode(HstSelect, {
                modelValue: state.select,
                "onUpdate:modelValue": ($event) => state.select = $event,
                title: "Games",
                options
              }, null, 8, ["modelValue", "onUpdate:modelValue"])
            ]),
            controls: withCtx(({ state }) => [
              createVNode(HstSelect, {
                modelValue: state.select,
                "onUpdate:modelValue": ($event) => state.select = $event,
                title: "Games",
                options
              }, null, 8, ["modelValue", "onUpdate:modelValue"])
            ]),
            _: 1
          }),
          createVNode(_component_Variant, {
            title: "options-as-array-of-objects",
            "init-state": initState
          }, {
            default: withCtx(({ state }) => [
              createBaseVNode("pre", _hoisted_1, toDisplayString(unref(objectOptions)), 1),
              createVNode(HstSelect, {
                modelValue: state.select,
                "onUpdate:modelValue": ($event) => state.select = $event,
                title: "Games",
                options: unref(objectOptions)
              }, null, 8, ["modelValue", "onUpdate:modelValue", "options"])
            ]),
            controls: withCtx(({ state }) => [
              createVNode(HstSelect, {
                modelValue: state.select,
                "onUpdate:modelValue": ($event) => state.select = $event,
                title: "Games",
                options: unref(objectOptions)
              }, null, 8, ["modelValue", "onUpdate:modelValue", "options"])
            ]),
            _: 1
          }),
          createVNode(_component_Variant, {
            title: "options-as-array-of-strings",
            "init-state": initState
          }, {
            default: withCtx(({ state }) => [
              createBaseVNode("pre", _hoisted_2, toDisplayString(unref(flatOptions)), 1),
              createVNode(HstSelect, {
                modelValue: state.select,
                "onUpdate:modelValue": ($event) => state.select = $event,
                title: "Select",
                options: unref(flatOptions)
              }, null, 8, ["modelValue", "onUpdate:modelValue", "options"])
            ]),
            controls: withCtx(({ state }) => [
              createVNode(HstSelect, {
                modelValue: state.select,
                "onUpdate:modelValue": ($event) => state.select = $event,
                title: "Select",
                options: unref(flatOptions)
              }, null, 8, ["modelValue", "onUpdate:modelValue", "options"])
            ]),
            _: 1
          })
        ]),
        _: 1
      });
    };
  }
});
_sfc_main.__file = "src/components/select/HstSelect.story.vue";
var HstSelect_story = /* @__PURE__ */ _export_sfc(_sfc_main, [["__file", "/Users/akryum/Projects/histoire/packages/histoire-controls/src/components/select/HstSelect.story.vue"]]);
export { HstSelect_story as default };
